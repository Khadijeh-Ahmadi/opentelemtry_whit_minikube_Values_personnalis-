opentelemetry-collector:
  image:
    repository: otel/opentelemetry-collector-contrib
    tag: 0.131.0

  podSecurityContext:
    fsGroup: 10001

  securityContext:
    runAsUser: 10001
    runAsGroup: 10001
    runAsNonRoot: true

  config:
    connectors:
      spanmetrics: {}
    exporters:
      debug: {}
      opensearch:
        http:
          endpoint: http://opensearch:9200
          tls:
            insecure: true
        logs_index: otel
      otlp:
        endpoint: jaeger-collector:4317
        tls:
          insecure: true
      "otlphttp/prometheus":
        endpoint: http://prometheus:9090/api/v1/otlp
        tls:
          insecure: true
      "otlp/tempo":
        endpoint: my-tempo.tracing.svc.cluster.local:4317
        tls:
          insecure: true
      file:
        path: /data/traces-%Y-%m-%d.json
        rotation:
          max_megabytes: 200
          max_backups: 14
          max_days: 14
      otlp/metricsgen:
        endpoint: my-tempo-metrics-generator.tracing.svc.cluster.local:4317
        tls:
          insecure: true
      prometheus:
        endpoint: "0.0.0.0:9464"



    extensions:
      health_check:
        endpoint: "${env:MY_POD_IP}:13133"
    processors:
      batch: {}
      k8sattributes:
        extract:
          metadata:
            - k8s.namespace.name
            - k8s.deployment.name
            - k8s.statefulset.name
            - k8s.daemonset.name
            - k8s.cronjob.name
            - k8s.job.name
            - k8s.node.name
            - k8s.pod.name
            - k8s.pod.uid
            - k8s.pod.start_time
        passthrough: false
        pod_association:
          - sources:
              - from: resource_attribute
                name: k8s.pod.ip
          - sources:
              - from: resource_attribute
                name: k8s.pod.uid
          - sources:
              - from: connection
      memory_limiter:
        check_interval: 5s
        limit_percentage: 80
        spike_limit_percentage: 25
      resource:
        attributes:
          - action: insert
            from_attribute: k8s.pod.uid
            key: service.instance.id
      transform:
        error_mode: ignore
        trace_statements:
          - context: span
            statements:
              - replace_pattern(name, "\\?.*", "")
              - replace_match(name, "GET /api/products/*", "GET /api/products/{productId}")
    receivers:
      httpcheck/frontend-proxy:
        targets:
          - endpoint: http://frontend-proxy:8080
      jaeger:
        protocols:
          grpc:
            endpoint: "${env:MY_POD_IP}:14250"
          thrift_compact:
            endpoint: "${env:MY_POD_IP}:6831"
          thrift_http:
            endpoint: "${env:MY_POD_IP}:14268"
      otlp:
        protocols:
          grpc:
            endpoint: "${env:MY_POD_IP}:4317"
          http:
            cors:
              allowed_origins:
                - http://*
                - https://*
            endpoint: "${env:MY_POD_IP}:4318"
      prometheus:
        config:
          scrape_configs:
            - job_name: opentelemetry-collector
              scrape_interval: 10s
              static_configs:
                - targets:
                    - "${env:MY_POD_IP}:8888"
      redis:
        collection_interval: 10s
        endpoint: valkey-cart:6379
      zipkin:
        endpoint: "${env:MY_POD_IP}:9411"
    service:
      extensions: [health_check]
      pipelines:
        logs:
          receivers: [otlp]
          processors: [k8sattributes, memory_limiter, resource, batch]
          exporters: [opensearch, debug]
        metrics:
          receivers: [httpcheck/frontend-proxy, redis, otlp, spanmetrics]
          processors: [k8sattributes, memory_limiter, resource, batch]
          exporters: ["otlphttp/prometheus", prometheus, debug]
        traces:
          receivers: [otlp, jaeger, zipkin]
          processors: [k8sattributes, memory_limiter, resource, transform, batch]
          exporters:
            - otlp
            - debug
            - spanmetrics
            - "otlp/tempo"
            - file
            - "otlp/metricsgen"
      telemetry:
        metrics:
          level: detailed
          readers:
            - periodic:
                exporter:
                  otlp:
                    endpoint: otel-collector:4317
                    protocol: grpc
                interval: 10000
                timeout: 5000
  extraVolumes:
    - name: otel-file-export
      persistentVolumeClaim:
        claimName: otel-file-export
  extraVolumeMounts:
    - name: otel-file-export
      mountPath: /data
      readOnly: false
